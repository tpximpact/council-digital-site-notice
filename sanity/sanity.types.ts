/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type GlobalContent = {
  _id: string;
  _type: "global-content";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  integrations?: "manual" | "openAPI";
  concernUrl?: string;
  concernContent?: string;
  cookiePolicyContent?: string;
  feedbackUrl?: string;
  councilName?: string;
  signUpUrl?: string;
  planningProcessUrl?: string;
  materialConsiderationUrl?: string;
  howToGetInvolveUrl?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  googleAnalytics?: string;
};

export type Comment = {
  _type: "comment";
  name?: string;
  address?: string;
  postcode?: string;
  telephone?: string;
  email?: string;
  comment?: string;
  topic?: string;
};

export type PlanningApplication = {
  _id: string;
  _type: "planning-application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  isActive?: boolean;
  planningId?: string;
  applicationNumber?: string;
  populateApi?: string;
  applicationType?: string;
  name?: string;
  description?: string;
  address?: string;
  applicationUpdatesUrl?: string;
  applicationDocumentsUrl?: string;
  image_head?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  image_gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  applicationStage?: {
    stage?: "Consultation" | "Assessment" | "Decision" | "Appeal";
    status?: {
      consultation?: "in progress" | "extended";
      assessment?: "in progress";
      decision?: "approved" | "pending approval" | "rejected";
      appeal?: "in progress" | "unsuccessful" | "successful";
    };
  };
  enableComments?: boolean;
  consultationDeadline?: string;
  height?: number;
  constructionTime?: string;
  location?: Geopoint;
  proposedLandUse?: {
    classB?: boolean;
    classC?: boolean;
    classE?: boolean;
    classF?: boolean;
    suiGeneris?: boolean;
    suiGenerisDetail?: string;
  };
  showOpenSpace?: boolean;
  openSpaceArea?: number;
  showHousing?: boolean;
  housing?: {
    residentialUnits?: number;
    affordableResidentialUnits?: number;
  };
  showCarbon?: boolean;
  carbonEmissions?: number;
  showAccess?: boolean;
  access?: string;
  showJobs?: boolean;
  jobs?: {
    min?: number;
    max?: number;
  };
  commments?: Array<
    {
      _key: string;
    } & Comment
  >;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};
export declare const internalGroqTypeReferenceTo: unique symbol;
